<!DOCTYPE html>
<html>
  <head>
  	<meta http-equiv="content-type" content="text/html; charset=utf-8;">
  	<title>Budding: <%= @document_title %></title>
    <link type="text/css" href="/css/smoothness/jquery-ui-1.8.custom.css" rel="stylesheet" />
		<link type="text/css" href="/css/common.css" rel="stylesheet" />
		<link type="text/css" href="/css/editor.css" rel="stylesheet" />
    <script type="text/javascript" src="/js/jquery-1.4.2.min.js"></script>
    <script type="text/javascript" src="/js/jquery-ui-1.8.custom.min.js"></script>
	  <script type="text/javascript" src="/js/jquery.prettyLoader.js"></script>


		<script src="js/jquery-1.3.2.min.js" type="text/javascript" charset="utf-8"></script>

		
    <script type="text/javascript">
    
    jQuery.fn.id = function() {  
      var ids = [];
      this.each(function() {
        ids.push(jQuery(this).attr('id'));
      });
      if(ids.length > 1) return ids;
      else return ids[0];
    };
    
    budding = {
      ui: {
        '#document-title-text': {val: "Click to add title"},
        currentFragments: {text: [], elements: []},
        text_block_selected: false,
        current_text_block: null,
        current_text_block_type: null,
        insertion_point_index: 0,
        handlers: {}
      },
      document: {
        id: <%= @document_id || "null" %>,
        title: <%= @has_title ? %Q{"#{@document_title.gsub('"', '\\"').strip}"} : "null" %>,
        body: $.extend([], {'toString': function() { 
          return $.map(this, function(elem) {
            return [elem.id, elem.text].join(':');
          }).join(',');
        }})
      },
      utils: {},
      identified_tags: {}
    };
    
    budding.ui.handlers.text_block = {
      click: function() {
        $('.insertion-point').show();
        $('.text-block').removeClass('text-block-selected');
        var editor_controls = $('#editor-controls').detach();
        $(this).after(editor_controls);
        var text_block_id = parseInt($(this).id().match(/.*(\d+)$/)[1]);
        $('#text-block-ta').css('margin-top', '-10px');
        $('#text-block-ta').val(budding.document.body[text_block_id].text);
        budding.ui.text_block_selected = true;
        budding.ui.current_text_block = text_block_id;
        $(this).addClass('text-block-selected');
        $('#text-block-ta').focus();
        var content = budding.document.body[text_block_id].text;
        $('#text-block-ta')[0].setSelectionRange(content.length, content.length);
        var metadata_editor = $('#metadata-editor').detach();
        $('#text-block-' + text_block_id).before(metadata_editor);
        var links = content.match(/<a>([^<]+)<\/a>/g) || [];
        if(links.length) {
          for(var i = 0, len = links.length; i < len; i++) {
            metadata_editor.append($('<span class="tag ui-corner-all">' + links[i].replace(' ', '&nbsp;') + '</span><input type="input"><br>'));
          }
          metadata_editor.show();
        }
      }
    }
    
    budding.ui.handlers.text_block_type_select = function() { 
      var tag = $('input[name=radio-text-block-type]:checked').val();
      if(budding.ui.text_block_selected) {
        var text_block = $('#text-block-' + budding.ui.current_text_block);
        var classes = ['h1', 'h2', 'p', 'blockquote'];
        for(var i = 0, len = classes.length; i < len; i++) {
          text_block.removeClass('text-block-' + classes[i]);
        }
        text_block.addClass('text-block-' + tag);
        budding.document.body[budding.ui.current_text_block].tag = tag;
      } else {
        budding.ui.current_text_block_type = tag;
      }
    };
    
    budding.utils.have_unclosed_tags = function(text) {
      // <a></a><b></b> = false
      // <a><b></b></a> = true
      // <a><b></b> = true
      var tags = text.match(/<([^/>]+)>/g);
      for(var tag in tags) {
        if(!text.match(new RegExp(tags[tag] + '[^>]*</' + tags[tag].substr(1)))) {
          return true;
        }
      }
      return false;
    }
    
    budding.load_known_tags = function() {
      $.get('/tags', function(data) {
        budding.known_tags = {};
        for(var i = 0, len = data.length; i < len; i++) {
          budding.known_tags[data[i].name] = data[i].category;
        }
      }, 'json');
    }
    
    budding.document.body.single_string = function() {
      return $.map(this, function(tb) { return tb.text; }).join("\n");
    }
    
    budding.parse_text_blocks = function() {
      var text_blocks = $('.text-block');
      for(var text_block_hash, i = 0, len = text_blocks.length; i < len; i++) {
        text_block_hash = {text: $.trim($(text_blocks[i]).text())};
        this.document.body.push(text_block_hash);
        text_block_hash.id = this.document.body.length-1;
        $(text_blocks[i]).click(budding.ui.handlers.text_block.click);
      }
      this.ui.insertion_point_index = this.document.body.length ? this.document.body.length-1 : 0;
    }
    
    budding.remove_text_block = function(id) {
      var to_be_removed = this.document.body[id];
      delete this.document.body[id];
      return to_be_removed; // whole object
    };
    
    
    budding.add_text_block = function(text, raw_text_import) {
      console.log('start::add_text_block()')
      console.log('budding.ui.insertion_point_index: ' + budding.ui.insertion_point_index)
      
      text = $.trim(text);
      var text_block_hash = {'text': text};
      var p = $('<p class="text-block"></p>').text(text);
      var new_insertion_point = $('<div class="insertion-point"></div>');
      
      text_block_hash.id = budding.ui.insertion_point_index;
      text_block_hash.tag = raw_text_import ? 'p' : budding.ui.current_text_block_type;
      
      p.attr('id', 'text-block-' + text_block_hash.id);
      p.addClass('text-block-' + text_block_hash.tag);
            
      var text_block = $('#text-block-' + text_block_hash.id);
      
      if(budding.ui.text_block_selected) {
        budding.update_text_block(budding.ui.current_text_block, text);
        $('#text-block-' + budding.ui.current_text_block).text(text);
        budding.place_editor_controls_at_insertion_point(budding.ui.current_text_block);
        // budding.make_fragments_clickable();
      } else {
        if(!text_block.length) { /* refactorable: if(document.is_empty()) */
          this.document.body.splice(text_block_hash.id, 0, text_block_hash);
          p.attr('id', 'text-block-' + text_block_hash.id);
          $('#insertion-point-' + text_block_hash.id).before(p);
        } else {
          $('#insertion-point-' + text_block_hash.id).show();
          text_block_hash.id += 1;
          var text_blocks = $('.text-block');
          var insertion_points = $('.insertion-point');
          for(var i = text_block_hash.id, len = text_blocks.length; i < len; i++) {
            $(text_blocks[i]).attr('id', 'text-block-' + (i+1));
            $(insertion_points[i]).attr('id', 'insertion-point-' + (i+1));
            this.document.body[i].id = i+1;
          }
          $('#editor-controls').after(new_insertion_point);
          this.document.body.splice(text_block_hash.id, 0, text_block_hash);
          p.attr('id', 'text-block-' + text_block_hash.id);
          new_insertion_point.before(p);
          new_insertion_point.attr('id', 'insertion-point-' + text_block_hash.id);
        }
        console.log('budding.place_editor_controls_at_insertion_point(' + text_block_hash.id + ');')
        budding.place_editor_controls_at_insertion_point(text_block_hash.id);
        budding.identify_tags(text);
        // budding.make_fragments_clickable();            
        new_insertion_point.click(function() {
          budding.place_editor_controls_at_insertion_point.click_handler($(this));
        });
        p.click(budding.ui.handlers.text_block.click);
      }
      
      console.log('end::add_text_block()')
      console.log('budding.ui.insertion_point_index: ' + budding.ui.insertion_point_index)
  
    };
    
    budding.update_text_block = function(text_block_id, text_block_value) {
      budding.document.body[text_block_id].text = text_block_value;
      budding.document.body[text_block_id].tag = budding.ui.current_text_block_type;
    };
    
    budding.save_story = function() {
      if(this.document.id != null)
        $('#editor-form').attr('action', '/documents/' + this.document.id);
      if(budding.ui.text_block_selected) {
        budding.update_text_block(budding.ui.current_text_block, $('#text-block-ta').val());
      } else if(!$('#text-block-ta').val().match(/^\s*$/)) {
        budding.add_text_block($('#text-block-ta').val());
      }
      $('#editor-form input[name=title]').val(this.document.title);
      $('#editor-form input[name=story]').val(this.document.body.single_string());
      $('#editor-form').submit();
    };
    
    
    budding.identify_tags = function(text) {
      var tag, category, box;
      for(tag in budding.known_tags) {
        if(text.indexOf(tag) != -1 && !budding.identified_tags[tag]) {
          category = budding.known_tags[tag];
          box = $('#' + category + '-fragments-end');
          if(box.length) {
            box.before($('<span class="tag ui-corner-all">' + tag.replace(' ', '&nbsp;') + '</span>'));
            budding.identified_tags[tag] = true;
          }
        }
      }
    };
    
    budding.make_fragments_clickable = function() {
      var blocks = $('#text-blocks p');
      for(var i = 0, len = blocks.length; i < len; i++) {
        var block = $(blocks[i]);
        var text = $.trim(block.text());
        var fragments = [];
        var pieces = text.split(' ');
        for(var piece, fragment, j = 0, jlen = pieces.length; j < jlen; j++) {
          piece = pieces[j];
          var fragment_nontext = [];
          while(piece.charAt(piece.length-1).match(/[.,;:!?]/) && piece.length) {
            fragment_nontext.push(piece.charAt(piece.length-1));
            piece = piece.substr(0, piece.length-1);
          }
          fragment = $('<span></span>');
          fragment.attr('class', 'selectable');
          fragment.text(piece);
          fragments.push(fragment);
          if(j != jlen-1) {
            fragment_nontext.push(' ');
          }
          fragments.push($('<span></span>').text(fragment_nontext.join('')));
        }
        block.text("");
        block.append.apply(block, fragments);
      }
      $('.selectable').click(function(event) {
        if(budding.ui.shiftKey) {
          budding.ui.currentFragments.elements.push($(this));
          $(this).css('background', '#789');
          budding.ui.currentFragments.text.push($(this).text());
        } else {
          var selected_fragment = $("<span>" + $(this).text() + "</span>");
          selected_fragment.attr('class', 'selected');
          selected_fragment.draggable();
          $('#fragments-end').before(selected_fragment);
        }
      });
      $('#wikipedia-dropbox').droppable({
        drop: function(event, ui) {
          $(this).append('<br>');
          $('#wikipedia-fragments-end').before('<span class="selected" style="margin: 2px;">' + ui.draggable.text() + '</span>');
          ui.draggable.remove();
        }
      });
    }

    budding.place_editor_controls_at_insertion_point = function(index) {
      var insertion_point = $('#insertion-point-' + index);
      budding.place_editor_controls_at_insertion_point.click_handler(insertion_point);
    }
    
    budding.place_editor_controls_at_insertion_point.click_handler = function(context) {

      context = $(context);
      console.log('start::place_editor_controls_at_insertion_point.click_handler()');
      console.log('budding.ui.insertion_point_index: ' + budding.ui.insertion_point_index);
      budding.ui.insertion_point_index = parseInt(context.id().match(/(\d+)$/)[1]);
      console.log('context.id(): ' + context.id());

      if(budding.ui.text_block_selected) {
        var last_selected_text_block = $('#text-block-' + budding.ui.current_text_block);
        last_selected_text_block.removeClass('text-block-selected');
        last_selected_text_block.show();
        budding.ui.text_block_selected = false;
      }
      
      $('#text-block-ta').val("");
      var editor_controls = $('#editor-controls').detach();
      context.after(editor_controls);
      $('.insertion-point').show();
      context.hide();
      editor_controls.show();
      $('#text-block-ta').focus();
      console.log('end::place_editor_controls_at_insertion_point.click_handler()');
      console.log('budding.ui.insertion_point_index: ' + budding.ui.insertion_point_index);

    }

    budding.init = function() {

      
      budding.load_known_tags();
      
      this.parse_text_blocks();
      
      budding.ui.handlers.text_block_type_select();
      
      budding.place_editor_controls_at_insertion_point(this.ui.insertion_point_index);
      
      $('.top-button').button();
      $('#editor-save').button();
      $('#text-block-type-buttonset').buttonset();
      
      $('.top-button').click(function(elem) {
        window.location = '/' + $(elem.target).attr('id').match(/button-(\w+)/)[1];
      });
      
      
      $('#document-title-text').keypress(function(e) {
        return e.keyCode == 13;
      });
      
      
      $('#text-block-ta').keypress(function(e) {
        if(e.which == 13) { // enter key
          var ta_val = $('#text-block-ta').val();
          if(budding.ui.text_block_selected && budding.document.body[budding.ui.current_text_block].text == ta_val) {
            return false;
          } else if(ta_val.match(/^\s*$/)) {
            return false;
          }
          budding.add_text_block(ta_val);
          return false;
        }
        return true;
      });
      
      
      // $('#text-block-ta').change(function() {
      //   
      // });
      
      
      $('body').keydown(function(e) { 
        budding.ui.shiftKey = e.shiftKey;
      });
      
      
      $('body').keyup(function() { 
        if(budding.ui.shiftKey) {
          if(budding.ui.currentFragments.elements.length) {
            for(var span, i = 0, len = budding.ui.currentFragments.elements.length; i < len; i++) {
              budding.ui.currentFragments.elements[i].css('background', '#fff');
            }
            span = $("<span>" + budding.ui.currentFragments.text.join(' ') + "</span>");
            span.attr('class', 'selected');
            span.draggable();
            $('#fragments-end').before(span);
            budding.ui.currentFragments = {text: [], elements: []};
          }
          budding.ui.shiftKey = false;
        }
      });
      
      
      $('#document-title').click(function() {
        if(!$("#document-title-input").is(":visible")) {
          $("#document-title-input").show();
          $("#document-title-input").val(budding.document.title);
          $("#document-title-text").hide();
        }
      });
      
      
      $('#document-title-input').blur(function(e) {
        var title = $.trim($("#document-title-input").val());
        $("#document-title-input").hide();
        if(!title.match(/^\s*$/)) {
          budding.document.title = title;
          $("#document-title-text").text(title);
        } else {
          $("#document-title-text").text(budding.ui["#document-title-text"].val);
        }        
        $("#document-title-text").show();
      });
      
      $(document).keypress(function(e) {
        if(e.which == 13) {
          var title = $("#document-title-input").val();
          $("#document-title-input").hide();
          if(!title.match(/^\s*$/)) {
            budding.document.title = $("#document-title-input").val();
            $("#document-title-text").text(budding.document.title);
          } else {
            $("#document-title-text").text(budding.ui["#document-title-text"].val);
          }
          
          $("#document-title-text").show();
        }
      });
      
      $('input[name=radio-text-block-type]').change(budding.ui.handlers.text_block_type_select);
      
      $('#editor-save').click(function() { 
        budding.save_story();
      });
      
      $('.insertion-point').click(function() {
        $('#text-block-ta').css('margin-top', '-5px');
        budding.place_editor_controls_at_insertion_point.click_handler($(this));
      });
      
      $('#button-raw-import').click(function() {
        var ta_val = $('#text-block-ta').val();
        if(budding.ui.text_block_selected && budding.document.body[budding.ui.current_text_block].text == ta_val) {
          return;
        } else if(ta_val.match(/^\s*$/)) {
          return;
        }
        var text_block, text_blocks = ta_val.replace(/\n{2,}/, '\n').split(/\n/);
        var j = 0;
        for(var i = 0, len = text_blocks.length; i < len; i++) {
          text_block = $.trim(text_blocks[i]);
          if(text_block.length) {
            budding.add_text_block(text_blocks[i]);
          }
        }
      });

    }
    
    $(document).ready(function(){
      budding.init();
    });
    
    </script>
  </head>
  <body>
    <div id="top" class="ui-corner-top">
      <h1>Budding</h1>
      <input type="button" id="button-dashboard" class="top-button" value="Dashboard">
      <input type="button" id="button-logout" class="top-button" value="Logout">
    </div>
    <div id="controls" class="ui-corner-bottom">
      This is a document editor built with the specific goal of making annotation easier.
      <ul>
        <li>Each input box represents a block of text, click the [+] button to add more once you're done.</li>
        <li>Click on words to add them to the sidebar for later annotation.</li>
        <li>Press and hold <b>shift</b> to select multiple words (compose phrases).</li>
        <li>After selecting words and phrases, use the side-bar to assign links and save.</li>
      </ul>
    </div>
    <div id="content">
      <div id="editor">
        <div id="text-blocks">
          <div id="metadata-editor" class="ui-corner-top">
          </div>
          <% if @text_blocks.length == 0 %>
            <div id="insertion-point-0" class="insertion-point"></div>
          <% else %>
            <% @text_blocks.each_with_index do |value, index| %>
            <p id="text-block-<%= index %>" class="text-block">
            <%= escape_html(value) %>
            </p>
            <div id="insertion-point-<%= index %>" class="insertion-point"></div>
            <% end %>
          <% end %>
          <div id="editor-controls">
            <textarea id="text-block-ta"></textarea>
            <div id="text-block-type-buttonset">
              <input type="button" value="Raw text import" id="button-raw-import" style="height: 29px; margin-right: 2px;">
              <input type="radio" name="radio-text-block-type" id="text-block-type-h1" value="h1"><label for="text-block-type-h1">&lt;h1&gt;</label>
              <input type="radio" name="radio-text-block-type" id="text-block-type-h2" value="h2"><label for="text-block-type-h2">&lt;h2&gt;</label>
              <input type="radio" checked="true" name="radio-text-block-type" id="text-block-type-p" value="p"><label for="text-block-type-p">&lt;p&gt;</label>
              <input type="radio" name="radio-text-block-type" id="text-block-type-blockquote" value="blockquote"><label for="text-block-type-blockquote">&lt;blockquote&gt;</label>
            </div>
            <div id="editor-save-box">
            </div>
          </div>
          <form id="editor-form" method=post action=/documents>
            <input type="hidden" name="title" value="">
            <input type="hidden" name="story" value="">
            <input type="button" id="editor-save" value="Save">
          </form>
        </div>
      </div>
      <div id="fragments-container">
        <div id="document-title" class="ui-corner-left ui-corner-br" style="display: none;">
          <div class="box-label ui-corner-bl">title</div> 
          <span id="document-title-text"><%= @has_title ? @document_title : "Click to add title" %></span>
          <textarea id="document-title-input" style="display: none;" class="ui-widget"><%= @has_title ? @document_title : "Click to add title" %></textarea>
        </div>
        <div id="selected-fragments" class="tagbox ui-corner-all" style="display: none;">
          <div class="box-label ui-corner-bl">&lt;selected&gt;</div> 
          <span id="fragments-end"></span>
        </div>
        <div id="dropboxes">
          <div class="tagbox ui-corner-all">
            <div class="box-label ui-corner-bl">&lt;person&gt;</div> 
            <span id="person-fragments-end"> </span>
          </div>
          <div class="tagbox ui-corner-all">
            <div class="box-label ui-corner-bl">&lt;company&gt;</div> 
            <span id="wikipedia-fragments-end"> </span>
          </div>
          <div class="tagbox ui-corner-all">
            <div class="box-label ui-corner-bl">&lt;wikipedia&gt;</div> 
            <span id="wikipedia-fragments-end"></span>
          </div>
          <div class="tagbox ui-corner-all">
            <div class="box-label ui-corner-bl">&lt;google&gt;</div> 
            <span id="google-fragments-end"> </span>
          </div>
        </div>
      </div>
      <!--
        Title
        Short summary
        Teaser
        Complete copy
        Metadata
        Locations
        People
        Companies
        Keywords
        Language
      -->
      <div id="blurb"><span class="blurb">A <a href="http://www.dangerousprecedent.com/">Dangerous Precedent</a> product.</span></div>
    </div>
  </body>
</html>
